 stage('Build and Push Docker Image...') {
            steps {
                script {
                  // CUSTOM REGISTRY
                    docker.withRegistry('https://registry.example.com') {
                      
                        /* Build the container image */            
                        def dockerImage = docker.build("my-image:${env.BUILD_ID}")
                      
                        /* Push the container to the custom Registry */
                        dockerImage.push()
                      
                    }
                    /* Remove docker image*/
                    sh 'docker rmi -f my-image:${env.BUILD_ID}'   
               }
            } 
        }

 stage('Build and Push Docker Image...') {
          steps {
                script {
                  // DOCKER HUB
                  
                  /* Build the container image */            
                  def dockerImage = docker.build("my-image:${env.BUILD_ID}")
                        
                  /* Push the container to the docker Hub */
                  dockerImage.push()

                  /* Remove docker image*/
                  sh 'docker rmi -f my-image:${env.BUILD_ID}'

                } 
            } 
        }

stage('Deploy to Kubernetes Cluster') {
  steps {
  ///CREATE AND APPLY THE PATCH. REMEMBER TO LOGIN ON THE CLUSTER. (-s $CLUSTER_URL --token $TOKEN_CLUSTER --insecure-skip-tls-verify)
    sh  '''
                     
    PATCH_TO_DEPLOY={\\"metadata\\":{\\"labels\\":{\\"version\\":\\"${env.BUILD_ID}\\"}},\\"spec\\":{\\"template\\":{\\"metadata\\":{\\"labels\\":{\\"version\\":\\"${env.BUILD_ID}\\"}},\\"spec\\":{\\"containers\\":[{\\"name\\":\\"$NAME_DEPLOY\\",\\"image\\":\\"my-image:${env.BUILD_ID}\\"}]}}}}
                    
    kubectl patch deployment $NAME_DEPLOY  -n $NAMESPACE -p $PATCH_TO_DEPLOY \
    -s $CLUSTER_URL --token $TOKEN_CLUSTER --insecure-skip-tls-verify
                    
    '''
                    
    }
}
